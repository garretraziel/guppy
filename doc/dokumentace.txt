%% iso 8859-2 ; lf

Toto je jen surovina na plastelínu, ze které se pak vymodeluje dokumentace.
Obsahuje hromadu sraèek. Pod 18 nepøístupné.

FIT VUT Brno

Dokumentace
verze: (první napsání sraèek)

IFJ11


Brabec Luká¹ xbrabe09
Dujíèek Ale¹ xdujicXX
Mokrá Radka  xmorkaXX
Sedlák Jan   xsedla85

TOC


ÚVOD

Tento text je dokumentací k týmovému projektu do kurzu IFJ (Formální jazyky a pøekladaèe) a IAL (Algoritmy). Popisuje implementaci interpretru jisté podmno¾iny programovacího jazyka Lua. Pro øe¹ení byla vybrána varianta a/1/I, tedy pro øazení algoritmus quicksort, pro tabulku symbolù binární strom a pro vyhledávání podøetìzcù KMPùv algoritmus.



IMPLEMENTACE


***lexikální analýza
Lexikální analýza je øe¹ena koneèným automatem (viz graf). Naèetený token (??lexém nemáme dal¹í dodateèný info, nebo jo??) jsou ulo¾eny v globální promìnné a jsou získávání funkcí get_token() ze zdrojového souboru. Samotná lexikální analýza nijak nemìní tabulku symbolù a literálù, toto je øe¹eno v jiných èástech programu a bude popsáno dal¹ích kapitolách.
Naèítání znakù ze vstupu je implementováno po znacích, které jsou ulkládány do  øetezce. Ten se v pøípadì potøeby realokuje na del¹í, základní délka byla stanovena na 16 znakù (??O'RLY??, a nìjak líp). V pøípadech, kdy je naètený znak ukonèující, ale nepatøí do naèítaného lexému, je znak vrácen na vstup.


***syntaktická analáza a zpracování výrazù
Pøeklad je syntaxí øízený, proto je syntaktická analýza jádrem celého projektu. (??vlastnohlavnì vymy¹lený, ale dudka to má podobnì, co teï??) Kdy¾ draci je¹tì volnì lítali po obloze, napsal Bajaja první syntaktický analyzátor a pojmenoval svoje dílo parser. Na poèet tohoto èinu je i ná¹ syntaktický analyzátor pojmenován parser.
Syntaktická analýza je realizována rekurzivním sestupem. Pro ka¾dé pravidlo existuje funkce, která která zkontroluje naèítané tokeny (??to zní divnì??) a zaji¹»uje i generování instrukcí na pásce.
Pokud je na vstupu výraz, je zavolána funkce expression(), ta výraz zpracuje precedenèní analýzou a vygeneruje pøíslu¹né instrukce.


***sémantická analáza



***vnitøní kód a interpretace
Vnitøní kód je realizován sadou 32 (??spoèítat??) instrukcí ulo¾ených v globální promìnné tape (pásce). Páska je lineárnì zøetìzený seznam s ukazatelem na aktuální prvek, který simuluje ètecí hlavu.
Vnitøní kód vyu¾ívá zásobník jako hlavní pamì» a celý interpretr je jednoduchým zásobníkovým poèítaèem. Proto¾e precedenèní zpracování výrazù pøevádí z infixové notace do postfixové, je implemetace - pøedev¹ím aritmetických operací - velice transparentní.
Interpretace bì¾í v nekoneèném cyklu a je ukonèena instrukcí IHALT, zaèátek programou je inicializován na instruckci volání funkce main. Samotné volání je inspirováno architekturou x86, lokální promìnné a parametry jsou na zásobníku, podobnì je vytvoøen i stack frame - ulo¾ení bázového registru a zálohování ukazatele na vrchol zásobníku do bázového registru, dále je na zásobníku i návratová adresa. Návrat z volané funkce probìhne získáním návratové adresy ze zásobníku a pushnutím návratové hodnoty.
(??mo¾ná nìco o INOP??)



***vestavìné funkce
*****read()
hurr durr, tady nám ti v¹iváci akorát hází klacky pod nohy!
*****find()
blah blah, a blah blah
*****sort()
to se tady kurva mám rozepisovat o quicksortu... common knowledge omg!


ZÁVÌR
